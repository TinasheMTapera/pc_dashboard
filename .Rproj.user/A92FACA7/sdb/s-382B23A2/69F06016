{
    "collab_server" : "",
    "contents" : "## requirements!!\n#if (!require(\"pacman\")) install.packages(\"pacman\")\n#pacman::p_load(shiny, \n               # DT, \n               # rlang, \n               # shinyjs, \n               # shinythemes, \n               # tidyverse, \n               # lubridate,\n               # scales,\n               # viridis,\n               # tidytext,\n               # sentimentr,\n               # tm,\n               # topicmodels, \n               # plotly)\n\n#upload the data and update dataset\nsource(\"./NewDataSet.R\", local=TRUE)\nsource(\"./Plots.R\", local = TRUE)\nsource(\"./TopicModelling.R\", local = TRUE)\n\nrequire(shiny)\nrequire(DT)\nrequire(rlang)\nrequire(shinyjs)\nrequire(shinythemes)\nrequire(tidyverse)\nrequire(lubridate)\nrequire(scales)\nrequire(viridis)\nrequire(tidytext)\nrequire(sentimentr)\nrequire(tm)\nrequire(topicmodels)\nrequire(plotly)\n\n# Define UI\nui=fluidPage(\n  theme = shinytheme(\"flatly\"),\n  tags$head(\n    tags$style(HTML( #move two tabs over a little\n      \".tabbable ul li:nth-child(4) { float: right; }\n      .tabbable ul li:nth-child(5) { float: right; }\"\n    ))\n  ),\n  useShinyjs(),\n  \n  # Application title\n  titlePanel(\"PC Dashboard\"),\n  \n  #set up the layout\n  sidebarLayout(\n    \n    #sidebar\n    position = \"right\",\n    sidebarPanel = sidebarPanel(width = 3,\n                                fluidRow(column(\n                                  textOutput(\"error1\"),\n                                  width = 10\n                                )),\n                                fluidRow(column(\n                                  dateRangeInput(inputId = \"Range\",\n                                                 label = \"Analyze Calls Within Date:\"), \n                                  align = \"center\", width = 12)),\n                                fluidRow(\n                                  column(\n                                    actionButton(inputId = \"UpdateRange\",\"Update range!\"), \n                                    width = 6,\n                                    align = \"left\"),\n                                  column(\n                                    actionButton(inputId = \"DefaultRange\",\"Use full range!\"), \n                                    width = 6,\n                                    align = \"right\")\n                                  ),\n                                #conditional visualiser options\n                                sliderInput(\"ntopics\", \"Number of Topics to Extract:\",\n                                            min = 2, max = 10, value = 3, round = T),\n                                radioButtons(\"counselorCalls\", \"View Calls By Role:\",\n                                            choices = c(\"Primary\" = \"primary\",\n                                                        \"Secondary\" = \"secondary\",\n                                                        \"Both\" = \"both\"),\n                                            selected = \"both\"),\n                                hr(),\n                                #conditional text statistics\n                                htmlOutput(\"stat1\"),\n                                htmlOutput(\"stat2\"),\n                                htmlOutput(\"stat3\"),\n                                htmlOutput(\"stat4\"),\n                                htmlOutput(\"stat5\")\n                                ),\n    \n    \n    \n    \n    \n    #main window\n    mainPanel = mainPanel(\n      \n      #tabset layout\n      tabsetPanel(id = \"tabset\", selected = 4, type = \"pills\",\n          \n          \n          #activity view\n          tabPanel(\"Activity View\", value = 1, icon = icon(\"phone-square\"),\n                   fluidRow(column(width=12, wellPanel(plotOutput(\"traffic\", height = \"200px\")))), #call traffic over time\n                   hr(),\n                   wellPanel(\n                   fluidRow(\n                     column(plotOutput(\"PerQuarter\", height = \"200px\"), width = 4), #call freq per quarter\n                     column(plotOutput(\"PerDay\", height = \"200px\"), width = 4), #call freq per DoW\n                     column(plotOutput(\"PerHour\", height = \"200px\"), width = 4) #call freq per hour of night\n                     ))\n                   ),\n          \n          \n          \n          #counselor view\n          tabPanel(\"Counselor View\", value = 2, icon = icon(\"user\"),\n                   wellPanel(\n                     splitLayout(\n                       plotOutput(\"Calls\", height = \"600px\"),\n                       plotOutput(\"Skills\", height = \"600px\")\n                       )\n                       )\n                     ),\n          \n          \n          #topics view\n          tabPanel(\"Topics View\", value = 3, icon = icon(\"comments\"),\n                   wellPanel(splitLayout(\n                     plotOutput(\"Topics\", height = \"600px\"),\n                     plotOutput(\"Issues\", height = \"600px\")\n                     )\n                     )\n                   ),\n          \n          # data loader\n          tabPanel(\"Data\", value = 4, icon = icon(\"upload\"),\n                   fluidRow(column(helpText(\"Welcome to PC Dashboard! With this tool, you can run analyses on \n                                              Peer Counseling Helpline data to investigate\n                                              call trends, counselor stats, and call topics.\"), \n                            width = 10,\n                            align = \"left\")),\n                   fluidRow(column(fileInput(inputId = \"file_in\", label = \"Choose a Call Log File to Get Started\", accept = c(\".csv\")),\n                                   width=12,\n                                   align=\"center\")),\n                   fluidRow(column(actionButton(inputId = \"go\", label=\"Go!\"),\n                                   width=12,\n                                   align=\"center\")),\n                   hr(),\n                   fluidRow(column(helpText(\"Then, click the Go button to go to the \n                                            analyses, or upload a different dataset by clicking Browse. \n                                            You can also change the range of data to be analyzed\n                                            on the right, or view all of the raw data below.\"),\n                                   width=6)),\n                   fluidRow(column(dataTableOutput(outputId = \"preview\"),\n                                   width=12,\n                                   align = \"center\"))\n          ),\n          \n          # help page\n          tabPanel(\"Help\", value = \"help\", icon = icon(\"info\"),\n                   fluidRow(\n                     column(\n                       tags$div(\n                         class=\"header\", \n                          tags$p(HTML(\n\"<h3>Thanks for using <br><strong>PC Dashboard!</strong></h3> This program was built for the <a href='http://drexel.edu/counselingandhealth/counseling-center/peer-counseling/'>Drexel University Peer Counseling Helpline</a>.\nIt was designed with the purpose of making managing the Helpline easier \nand more engaging by providing the board with <strong>data-driven statistics</strong> \nand <strong>Key Performance Indicators (KPI's)</strong> to support decision making.\n<p>This program was built by Tinashe Michael Tapera, an alumnus and former board member on the Helpline. \n<a href='https://dataintensive.quora.com/Data-Dive-The-Peer-Counseling-Helpline-Gmail-Archive'>Click Here</a> to see the work that inspired this project.\"\n                                      )\n                              )\n                       ), \n                     width = 4),\n                     \n                     column(\n                       tags$div(\n                         class=\"header\",\n                          tags$p(HTML(\n\"<h3>How To Use PC Dashboard:</h3>\n<ol>\n  <li> Load a dataset of call logs using the <strong>Data</strong> tab above. This dataset should be an Excel file exported from our Qualtrics call log system.</li>\n  <li> Choose a view from the options up top to view the analytics results.</li>\n  <li> Manipulate the date range with the widget in the sidebar to run analyses over different time frames.</li>\n  <li> The sidebar also has other analysis widgets that you can manipulate too.</li>\n</ol>\n\n<p>The <strong>Activity View</strong> gives a general visualisation and analysis of our call activity over the time range. Use this to understand <i>when</i> our phone is ringing.</p>\n<p>Use the <strong>Counselor View</strong> to get analysis of counselors who have taken calls and how they use their skills; this tells us <i>who</i> is answering the phone and how they are handling calls.</p>\n<p>Finally, the <strong>Topics View</strong> gives an in-depth analysis of the issues counselors identified, and compares that with the words they use in their call logs. \nThis is done through a machine learning technique called <a href='https://en.wikipedia.org/wiki/Topic_model'>Topic Modeling</a>, and can be used to find abstract topics in written documents \n<i>(Hint: We could use this to find words in the topic model that match, or don't match, our tagged call issues)</i>. Additionally, if counselors have given feedback about their calls, \nwe use another machine learning technique called <a href='https://en.wikipedia.org/wiki/Sentiment_analysis'>Sentiment Analysis</a> to evaluate how positive or negative their language is across all the feedback.</p>\"\n                                      )\n                              )\n                        ), \n                      width = 8))\n          )\n      )\n    )\n  ),\nhr(),\ntags$div(class = \"footer\",\n    tags$p(HTML(\n      \"<p style='text-align:center; font-size:70%; color:inherit'> Tinashe Michael Tapera | PC Dashboard 2018</p>\"\n    ))\n    )\n)\n\n\n# Define server logic------\nserver=shinyServer(function(input, output, session) {\n  \n  values = reactiveValues(df = NULL, subset = NULL)\n  \n  observeEvent(input$file_in, {\n    \n    values$df = Load_Data(input$file_in$datapath)\n    if(!is.null(values$df)) {\n      values$subset = Load_Data(input$file_in$datapath)\n      output$error1 = renderText(\"\")\n    }\n    else{\n      output$error1 = renderText(\"This doesn't look like a Qualtrics CSV file... Please try again.\")\n    }\n  })\n  \n  #update the range of data if this is punched\n  observeEvent(input$UpdateRange, {\n    values$subset = values$df%>%\n      filter(call_start > input$Range[1] & call_end < input$Range[2])\n    if(nrow(values$subset) < 1){\n      output$error1 = renderText(\"It looks like there's no data here. You may want to reset the date range.\")\n    }else{\n      output$error1 = renderText(\"\")\n    }\n  })\n  \n  #update the range of data if this is punched\n  observeEvent(input$DefaultRange, {\n    values$subset = values$df\n    output$error1 = renderText(\"\")\n  })\n  \n  \n  #following UI goes live only when file is successfully uploaded\n  observe({\n    toggle(id=\"go\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"Range\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"UpdateRange\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"DefaultRange\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"preview\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    \n    \n    toggle(id=\"stat1\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"stat2\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"stat3\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"stat4\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"stat5\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    \n    toggle(id=\"traffic\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"PerQuarter\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"PerDay\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"PerHour\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"Calls\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"Skills\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"Topics\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n    toggle(id=\"Issues\", condition=!is.null(values$df), anim=TRUE, animType = \"fade\", time = 0.8)\n\n  })\n  \n  #change to activity when go button goes live\n  observeEvent(input$go, {\n    updateTabsetPanel(session, \"tabset\", selected = \"1\")\n  })\n  \n  #show head of table\n  output$preview = renderDataTable({\n    \n    if(!is.null(values$df)){\n      values$df%>%\n        mutate(call_start = format(call_start, format=\"%B %d %Y, %H:%M\"),\n               call_end = format(call_end, format=\"%B %d %Y, %H:%M\"))%>%\n        DT::datatable(.,options = )\n    }\n    \n  })\n  \n  \n  #sidebar updated by user\n  observeEvent(values$subset, {\n    \n    #update the size of the subset in the widget\n    updateDateRangeInput(session, \"Range\",\n    start = getMin(values$subset),\n    end = getMax(values$subset))\n  })\n  \n  #nested ifelse for which stats to show on the sidebar\n  observeEvent(input$tabset, {\n    \n    if(input$tabset==\"1\"){\n      \n      output$stat1= renderUI({\n        \n        stat = values$subset%>%\n          filter(answer == \"Yes\")%>%\n          nrow()%>%\n          as.character()\n        paste0(\"Total Number of Calls: <strong>\", stat, \"</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat2 = renderUI({\n        stat = values$subset%>%\n          group_by(ask_student)%>%\n          summarise(n = n())%>%\n          mutate(freq = (n / sum(n))*100)%>%\n          filter(ask_student == \"Yes\")%>%\n          select(freq)%>%\n          round(2)%>%\n          as.character()\n        paste0(\"Drexel Students: <strong>\", stat, \"%</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat3 = renderUI({\n        stat = values$subset%>%\n          group_by(repeat.)%>%\n          summarise(n = n())%>%\n          mutate(freq = (n / sum(n))*100)%>%\n          filter(repeat. == \"Yes\")%>%\n          select(freq)%>%\n          round(2)%>%\n          as.character()\n        paste0(\"Repeat Callers: <strong>\", stat, \"%</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat4 = renderUI({\n        stat = values$subset%>%\n          select(one_of(c(\"call_start\", \"call_end\")))%>%\n          transmute(duration = call_end-call_start)%>%\n          top_n(1)%>%\n          as.character()\n        paste0(\"Longest Call: <strong>\", stat, \" mins</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat5 = renderUI({\n        stat = values$subset%>%\n          filter(ask_student == \"Yes\")%>%\n          select(one_of(c(\"call_start\", \"call_end\")))%>%\n          transmute(duration = call_end-call_start)%>%\n          transmute(mean_duration = round(mean(duration),2))%>%\n          slice(1)%>%\n          as.character()\n        paste0(\"Average Call: <strong>\", stat, \" mins</strong>\")%>%\n          HTML()\n      })\n    }\n    else if(input$tabset==\"2\"){\n      output$stat1= renderUI({\n       stat = values$subset%>%\n          select(one_of(c(\"primary\", \"secondary\")))%>%\n          gather()%>%\n          select(value)%>%\n          unique()%>%\n          nrow()%>%\n          as.character()\n       paste0(\"Total Number of Counselors on Call: <strong>\",stat,\"</strong>\")%>%\n         HTML()\n      })\n      \n      output$stat2 = renderUI({\n        stat = values$subset%>%\n          select(one_of(c(\"primary\", \"secondary\", \"call_start\", \"call_end\")))%>%\n          mutate(duration = call_end-call_start)%>%\n          top_n(n = 1,duration)%>%\n          select(one_of(c(\"primary\", \"secondary\")))%>%\n          transmute(pair = paste(as.character(primary), as.character(secondary), sep = \" & \"))%>%\n          as.character()\n        paste0(\"Longest Call: <strong>\", stat,\"</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat3 = renderUI({\n        stat = values$subset%>%\n          select(starts_with(\"referrals\"))%>%\n          gather(key = \"Referral\", value = \"value\", factor_key = TRUE)%>%\n          mutate(Referral = gsub(\"referrals\\\\.\", \"\", .$Referral))%>%\n          filter(value != 0)%>%\n          group_by(Referral)%>%\n          count(value)%>%\n          arrange(desc(n))%>%\n          select(Referral)%>%\n          ungroup()%>%\n          slice(1:3)%>%\n          c()\n        paste0(\"Top Referrals:<strong>\n                <ol>\n                  <li>\",gsub(\"_\", \" \", stat$Referral[1]),\" </li>\n                  <li>\",gsub(\"_\", \" \", stat$Referral[2]),\" </li>\n                  <li>\",gsub(\"_\", \" \", stat$Referral[3]),\" </li>\n                </ol>\n                </strong>\n               \")%>%\n          HTML()\n      })\n      \n      output$stat4 = renderUI({\n        return(\"\")\n      })\n      \n      output$stat5 = renderUI({\n        return(\"\")\n      })\n    }\n    else if((input$tabset==\"3\")){\n      output$stat1= renderUI({\n        \n        if(all(values$subset$couns_opinion == \"\")){\n          return(\"No feedback to analyze!\")\n        }\n        stat = values$subset%>%\n          mutate(ave_sentiment = GetSentiment(.$couns_opinion)$ave_sentiment)%>%\n          filter(!is.na(couns_opinion))%>%\n          select(ave_sentiment)%>%\n          summarise(ave = mean(ave_sentiment))%>%\n          round(2)%>%\n          as.character()\n        paste0(\"Average Counselor Feedback Sentiment Score: <strong>\",stat,\"</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat2 = renderUI({\n        if(all(values$subset$couns_opinion == \"\")){\n          return(\"\")\n        }\n        stat = values$subset%>%\n          mutate(ave_sentiment = GetSentiment(.$couns_opinion)$ave_sentiment)%>%\n          filter(!is.na(couns_opinion))%>%\n          arrange(desc(ave_sentiment))%>%\n          select(one_of(c(\"call_start\", \"ave_sentiment\")))\n        paste0(\"Most Positive Counselor Feedback: <strong>\", format(stat$call_start[1],format=\"%B %d %Y, %H:%M\"),\" (\", round(stat$ave_sentiment[1], 2), \")</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat3 = renderUI({\n        if(all(values$subset$couns_opinion == \"\")){\n          return(\"\")\n        }\n        stat = values$subset%>%\n          mutate(ave_sentiment = GetSentiment(.$couns_opinion)$ave_sentiment)%>%\n          filter(!is.na(couns_opinion))%>%\n          arrange(ave_sentiment)%>%\n          select(one_of(c(\"call_start\", \"ave_sentiment\")))\n        paste0(\"Most Negative Counselor Feedback: <strong>\", format(stat$call_start[1],format=\"%B %d %Y, %H:%M\"),\" (\", round(stat$ave_sentiment[1], 2), \")</strong>\")%>%\n          HTML()\n      })\n      \n      output$stat4 = renderUI({\n        \n        stat = values$subset%>%\n          filter(suicidal_thoughts == \"Yes\")%>%\n          nrow()%>%\n          as.character()\n        paste0(\"Calls With Suicidal Ideation: <strong>\", stat, \"</strong>\")%>%\n          HTML()\n        \n      })\n      \n      output$stat5 = renderUI({\n        stat = values$subset%>%\n          select(starts_with(\"marketing\"))%>%\n          gather(key = \"Marketing\", value = \"value\", factor_key = TRUE)%>%\n          mutate(Marketing = gsub(\"marketing\\\\.\", \"\", .$Marketing))%>%\n          filter(value != 0 & Marketing != \"Did_not_ask/unknown\")%>%\n          group_by(Marketing)%>%\n          count(value)%>%\n          arrange(desc(n))%>%\n          select(Marketing)%>%\n          ungroup()%>%\n          slice(1:3)%>%\n          c()\n        paste0(\"Top Marketing Strategies:<strong>\n               <ol>\n               <li>\",gsub(\"_\", \" \", stat$Marketing[1]),\" </li>\n               <li>\",gsub(\"_\", \" \", stat$Marketing[2]),\" </li>\n               <li>\",gsub(\"_\", \" \", stat$Marketing[3]),\" </li>\n               </ol>\n               </strong>\n               \")%>%\n          HTML()\n      })\n    }\n    else{\n      output$stat1= renderUI({\n        return(\"\")\n      })\n      \n      output$stat2 = renderUI({\n        return(\"\")\n      })\n      \n      output$stat3 = renderUI({\n        return(\"\")\n      })\n      \n      output$stat4 = renderUI({\n        return(\"\")\n      })\n      \n      output$stat5 = renderUI({\n        return(\"\")\n      })\n    }\n    \n    \n  })\n  \n  \n  #activity view outputs-------------\n  \n  traffic = reactive({\n    TrafficPlot(values$subset)\n  })\n  output$traffic = renderPlot(traffic())\n  \n  perQuarter = reactive({\n    QuarterPlot(values$subset)\n  })\n  output$PerQuarter = renderPlot(perQuarter())\n\n  perDay = reactive({\n    DayPlot(values$subset)\n  })\n  output$PerDay = renderPlot(perDay())\n  \n  perHour = reactive({\n    HourPlot(values$subset)\n  })\n  output$PerHour = renderPlot(perHour())\n  \n  \n  #counselor view outputs--------------\n  calls = reactive({\n    CallsPlot(values$subset, input$counselorCalls)\n  })  \n  output$Calls = renderPlot(calls())\n  \n  skills = reactive({\n    SkillsPlot(values$subset)\n  })\n  output$Skills = renderPlot(skills())\n  \n  #add by call type viewer option conditional\n  observeEvent(input$tabset, {\n    toggle(id=\"counselorCalls\", condition=input$tabset==2)\n  })\n  \n  #topics view outputs--------------\n  topics = reactive({\n    TopicsPlot(TidyLDA(values$subset, input$ntopics))\n  })\n  output$Topics = renderPlot(topics())\n  \n  issues = reactive({\n    IssuePlot(values$subset)\n  })\n  output$Issues = renderPlot(issues())\n  \n  #add ntopics option conditional\n  observeEvent(input$tabset, {\n    toggle(id=\"ntopics\", condition=input$tabset==3)\n  })\n  \n  \n})\n\n# Run the app ----\nshinyApp(ui=ui, server=server)\n",
    "created" : 1528319842925.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2811545615",
    "id" : "69F06016",
    "lastKnownWriteTime" : 1528333688,
    "last_content_update" : 1528333688509,
    "path" : "~/Google Drive/DataScience/pc_dashboard/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}